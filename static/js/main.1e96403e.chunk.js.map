{"version":3,"sources":["components/request/fetchRequest.js","components/display/DisplayUsers.js","App.js","reportWebVitals.js","index.js"],"names":["doFetch","request","a","url","body","type","data","res","undefined","error","errorMessage","fetch","method","headers","mode","response","json","ok","console","log","JSON","stringify","useState","React","useEffect","DisplayUsers","users","setUsers","convertTimestamp","stamp","date","Date","Number","getMonth","getDate","getFullYear","fetchRequest","fetchUsers","Container","fluid","Jumbotron","id","Table","striped","bordered","hover","size","map","header","user","className","first_name","last_name","address_one","address_two","city","state","zipcode","country","created_date","uuid","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e96403e.chunk.js","sourcesContent":["export default async function doFetch(request) {\n  const url = request.url ? request.url : ''\n  const body = request.body ? request.body : ''\n  const type = request.type ? request.type : ''\n  let data = {\n      res: undefined,\n      error: false,\n      errorMessage: ''\n  }\n\n  if (type === \"GET\") {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        mode: 'cors',\n      })\n      const res = await response.json()\n      if (res && response.ok) {\n        console.log('res', res)\n        data.res = res\n        return data\n      } else {\n        data.res = res\n        data.error = true\n        data.errorMessage = res['error']\n        return data\n      }\n    } catch (error) {\n      data.error = true\n      data.errorMessage = error\n      return data\n    }\n  } else {\n    try {\n      const response = await fetch(url, {\n        method: `${type}`,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body),\n        mode: 'cors',\n      })\n      const res = await response.json()\n      if (res && response.ok) {\n        data.res = res\n        return data\n      } else {\n          data.res = res\n        data.error = true\n        data.errorMessage = res['error']\n        return data\n      }\n  } catch (error) {\n      data.error = true\n      data.errorMessage = error\n      return data\n    }\n  }\n}\n","import React from 'react'\n\nimport fetchRequest from '../request/fetchRequest'\n\nimport Container from 'react-bootstrap/Container'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Table from 'react-bootstrap/Table'\n\nconst {useState, useEffect} = React\n\nfunction DisplayUsers() {\n  const [users, setUsers] = useState([])\n  const headers = [\n    'First Name', 'Last Name', 'Address 1', 'Address 2',\n    'City', 'State', 'Zip', 'Country', 'Date Added'\n  ]\n\n  useEffect(() => {\n    console.log('rendered')\n    async function fetchUsers() {\n      console.log('calling')\n      const route = 'https://0sjhqfet72.execute-api.us-east-1.amazonaws.com/dev/api/admin'\n\n      const data = await fetchRequest({url: route, type: 'GET'})\n\n      if (data.error) {\n        console.log(data.error)\n      } else {\n        console.log(data)\n        setUsers(data.res.users)\n        // fixme: add loaded state\n      }\n    }\n\n    fetchUsers()\n  }, [])\n\n  function convertTimestamp(stamp) {\n    let date = new Date(Number(stamp) * 1000)\n    date = (date.getMonth()+1)+'/'+date.getDate()+'/'+date.getFullYear()\n    return date\n  }\n\n  return (\n    <>\n      <Container fluid>\n        <Jumbotron id='jumbo'><h1>Admin View</h1></Jumbotron>\n        <Table striped bordered hover size='sm'>\n          <thead>\n            <tr>\n              {headers.map(header =>\n                <th key={header}>{header}</th>  \n              )}\n            </tr>\n          </thead>\n          <tbody>\n            {users.map(user => \n              <tr key={user.uuid[\"S\"]}>\n                <td className='usersCell'>{user.first_name[\"S\"]}</td>\n                <td className='usersCell'>{user.last_name[\"S\"]}</td>\n                <td className='usersCell'>{user.address_one[\"S\"]}</td>\n                <td className='usersCell'>{user.address_two[\"S\"]}</td>\n                <td className='usersCell'>{user.city[\"S\"]}</td>\n                <td className='usersCell'>{user.state[\"S\"]}</td>\n                <td className='usersCell'>{user.zipcode[\"S\"]}</td>\n                <td className='usersCell'>{user.country[\"S\"]}</td>\n                <td className='usersCell'>{convertTimestamp(user.created_date[\"N\"])}</td>\n              </tr>  \n            )}\n          </tbody>\n        </Table>\n      </Container>\n    </>\n  )\n}\n\nexport default DisplayUsers;","import './App.css';\nimport { BrowserRouter as Route} from 'react-router-dom'\nimport DisplayUsers from './components/display/DisplayUsers'\n\nfunction App() {\n  return (\n    <>\n      <Route>\n        <DisplayUsers />\n      </Route>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}